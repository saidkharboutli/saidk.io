"use strict";
const linkStarts = /* @__PURE__ */ new WeakMap();
const linkEnds = /* @__PURE__ */ new WeakMap();
addIntersectionObserver();
addResizeObserver();
function addIntersectionObserver() {
  const observer = new IntersectionObserver((sections) => {
    console.log("observer");
    sections.forEach((section) => {
      const heading = section.target.querySelector("h2, h3, h4, h5");
      if (!heading)
        return;
      const id = heading.getAttribute("id");
      const link = document.querySelector(`nav.toc li a[href="#${id}"]`);
      if (!link)
        return;
      console.log(link);
      const addRemove = section.intersectionRatio > 0 ? "add" : "remove";
      link.classList[addRemove]("active");
    });
    updatePath();
  });
  document.querySelectorAll("article section").forEach((section) => {
    observer.observe(section);
  });
  console.log(observer);
}
function addResizeObserver() {
  if (!document.querySelector("nav.toc"))
    return;
  const observer = new ResizeObserver(() => {
    drawPath();
    updatePath();
  });
  observer.observe(document.querySelector("nav.toc"));
}
function drawPath() {
  console.log("hello");
  const path = document.querySelector("path.toc-marker");
  const links = Array.from(document.querySelectorAll("nav.toc a"));
  if (!links.length)
    return;
  let pathData = [];
  let left = 0;
  links.forEach((link, i) => {
    const x = link.offsetLeft;
    const y = link.offsetTop;
    const height = link.offsetHeight;
    if (i === 0) {
      linkStarts.set(link, 0);
      pathData.push("M", x, y, "L", x, y + height);
    } else {
      if (left !== x)
        pathData.push("L", left, y);
      pathData.push("L", x, y);
      path.setAttribute("d", pathData.join(" "));
      linkStarts.set(link, path.getTotalLength());
      pathData.push("L", x, y + height);
    }
    left = x;
    path.setAttribute("d", pathData.join(" "));
    linkEnds.set(link, path.getTotalLength());
  });
}
function updatePath() {
  console.log("sections");
  const path = document.querySelector("path.toc-marker");
  const pathLength = path.getTotalLength();
  const activeLinks = document.querySelectorAll("nav.toc a.active");
  let linkStart = pathLength;
  let linkEnd = 0;
  activeLinks.forEach((link) => {
    linkStart = Math.min(linkStart, linkStarts.get(link));
    linkEnd = Math.max(linkEnd, linkEnds.get(link));
  });
  path.style.display = activeLinks.length ? "inline" : "none";
  path.setAttribute(
    "stroke-dasharray",
    `1 ${linkStart} ${linkEnd - linkStart} ${pathLength}`
  );
}

//# sourceMappingURL=data:application/json;base64,